from rest_framework.decorators import api_view, permission_classes
from django.db.models import Q
from rest_framework.response import Response 
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from payments.serializer import OrderSerializer
from users.models import CustomUser
from payments.models import Order
import stripe
from dotenv import load_dotenv
import os 
import decimal


# Create your views here.


load_dotenv()
stripe.api_key = os.environ.get('stripe_secret_key')


def generate_order(data, amount):
    email = data['email']
    user_id = data['user_id']

    del data['user_id']
    del data['amount']
    del data['payment_method_id']

    try:
        user = CustomUser.objects.get(Q(email=email) & Q(id=user_id) & Q(is_active = True))
        description = f"Order generated by user {user.first_name}"
        
        price_formated = decimal.Decimal((amount).replace(',', '.'))

        order = Order.objects.create(user = user, description=description, price=price_formated, **data)
        order_serialized = OrderSerializer(instance=order, many=False)

        return order_serialized.data
    
    except CustomUser.DoesNotExist:
        return "error_does_not_exist"

        

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def save_stripe_info(request):
    email = request.data['email']
    payment_method_id = request.data['payment_method_id']
    extra_msg = 'New costumer added.'


    # checking if customer with provided email already exists
    customer_data = stripe.Customer.list(email=email).data   
     
    # if the array is empty it means the email has not been used yet  
    if len(customer_data) == 0:
        # creating customer
        customer = stripe.Customer.create(
        email=email, payment_method=payment_method_id)
    else:
        customer = customer_data[0]
        extra_msg = "Customer already existed."


    stripe.PaymentIntent.create(
        customer=customer, 
        payment_method=payment_method_id,  
        currency='brl', 
        amount=int(request.data['amount']) * 100,
        confirm=True,
        payment_method_types=['card']
    )     

    order = generate_order(request.data, request.data['amount'])

    if order == "error_does_not_exist":
        return Response({'error_does_not_exist': 'User not found.'}, status=status.HTTP_404_NOT_FOUND)


    return Response(status=status.HTTP_200_OK, 
        data={'message': 'Success', 'data': {'customer_id': customer.id, 'order':order}, 'extra_msg':extra_msg}
    )    
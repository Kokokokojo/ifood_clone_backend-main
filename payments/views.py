import os 
import decimal
import stripe
from django.db.models import Q, F
from rest_framework.response import Response 
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from payments.serializer import OrderSerializer
from users.models import CustomUser
from restaurants.models import Restaurant
from products.models import Product
from payments.models import Order, OrderStatus
from products.serializer import ProductSerializer
from dotenv import load_dotenv
from rest_framework.decorators import api_view, permission_classes
from _utils.utils import send_mail, send_sms


# Create your views here.


load_dotenv()
stripe.api_key = os.environ.get('stripe_secret_key')


def generate_order(data, amount):
    email = data['email']
    user_id = data['user_id']
    restaurant_id = data['restaurant_id']
    products_ids = data['products_ids']

    del data['user_id']
    del data['amount']
    del data['payment_method_id']
    del data['restaurant_id']
    del data['products_ids']

    try:
        user = CustomUser.objects.get(Q(email=email) & Q(id=user_id) & Q(is_active = True))
        restaurant = Restaurant.objects.get(Q(id=restaurant_id) & Q(is_active = True))
        description = f"Order generated by user {user.first_name}"
        
        price_formated = decimal.Decimal(str(amount).replace(',', '.'))

        order = Order.objects.create(user=user, restaurant=restaurant, description=description, price=price_formated, **data)
        order_serialized = OrderSerializer(instance=order, many=False).data

        order.items.add(*products_ids) 

        Product.objects.filter(id__in=products_ids, is_active=True).update(total_sales=F('total_sales') + 1)

        updated_products = Product.objects.filter(id__in=products_ids, is_active=True)
        products_serialized = ProductSerializer(instance=updated_products, many=True).data


        order_serialized['products'] = products_serialized

        return order_serialized
    
    except CustomUser.DoesNotExist:
        return "error_does_not_exist"
    
    except Restaurant.DoesNotExist:
        return "error_does_not_exist_restaurant"

        

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def save_stripe_info(request):
    email = request.data['email']
    amount = request.data['amount']

    payment_method_id = request.data['payment_method_id']
    extra_msg = 'New costumer added.'

    # checking if customer with provided email already exists
    customer_data = stripe.Customer.list(email=email).data   
     
    # if the array is empty it means the email has not been used yet  
    if len(customer_data) == 0:
        customer = stripe.Customer.create(
        email=email, payment_method=payment_method_id)

    else:
        customer = customer_data[0]
        extra_msg = "Customer already existed."

    order = generate_order(request.data, request.data['amount'])

    if order == "error_does_not_exist":
        return Response({'error_does_not_exist': 'User not found.'}, status=status.HTTP_404_NOT_FOUND)
    
    elif order == "error_does_not_exist_restaurant":
        return Response({'error_does_not_exist_restaurant': 'Restaurant not found.'}, status=status.HTTP_404_NOT_FOUND)


    stripe.PaymentIntent.create(
        customer=customer, 
        payment_method=payment_method_id,  
        currency='brl', 
        amount=int(amount) * 100,
        confirm=True,
        payment_method_types=['card']
    )     

    return Response(status=status.HTTP_200_OK, 
        data={'message': 'Success', 'data': {'customer_id': customer.id, 'order':order}, 'extra_msg':extra_msg}
    )    




@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def mark_order_ready_tk(request):
    user_id = request.data.get('user_id', '')
    order_id = request.data.get('order_id', '')

    try:
        user = CustomUser.objects.get(Q(id=user_id) & Q(is_active = True))
        order = Order.objects.get(Q(id=order_id) & Q(user=user))

        order.status = OrderStatus.TAKEOUT
        order.save()

        send_sms(user.phone, "Seu pedido est√° pronto para ser retirado. - Bytefood")

    except CustomUser.DoesNotExist:
        return Response({'message': 'User does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)
    
    except Order.DoesNotExist:
        return Response({'message': 'Order does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)


    return Response({'message': 'Order status updated to ready.', "success":True}, status=status.HTTP_200_OK)


@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def mark_order_done_tk(request):
    user_id = request.data.get('user_id', '')
    order_id = request.data.get('order_id', '')

    try:
        user = CustomUser.objects.get(Q(id=user_id) & Q(is_active = True))
        order = Order.objects.get(Q(id=order_id) & Q(user=user))

        order.status = OrderStatus.DELIVERED
        order.save()

        send_sms(user.phone, "Pedido entregue. Bom apetite! - Bytefood")

        
    except CustomUser.DoesNotExist:
        return Response({'message': 'User does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)
    
    except Order.DoesNotExist:
        return Response({'message': 'Order does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)


    return Response({'message': 'Order status updated to done.', "success":True}, status=status.HTTP_200_OK)


@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def mark_order_cancelled_tk(request):
    user_id = request.data.get('user_id', '')
    order_id = request.data.get('order_id', '')

    try:
        user = CustomUser.objects.get(Q(id=user_id) & Q(is_active = True))
        order = Order.objects.get(Q(id=order_id) & Q(user=user))

        order.status = OrderStatus.CANCELLED
        order.save()

        send_sms(user.phone, "Seu pedido foi cancelado com sucesso. - Bytefood")
        send_mail(user.email, 'cancelled')

        
    except CustomUser.DoesNotExist:
        return Response({'message': 'User does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)
    
    except Order.DoesNotExist:
        return Response({'message': 'Order does not exist.', "success":False}, status=status.HTTP_404_NOT_FOUND)


    return Response({'message': 'Order status updated to done.', "success":True}, status=status.HTTP_200_OK)

